@page "/add-user"
@using placement_cell_final.Shared.Models;
@inject HttpClient HttpClient


<p class="mt-8 mb-4 text-3xl font-bold leading-none tracking-tight text-gray-900">Add User</p>

<div class="w-full max-w-lg">
    <EditForm Model="@user" OnValidSubmit="@SubmitForm" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">


        <div class="mb-4">

            <label class="block text-gray-700 text-sm font-bold mb-2" for="Name">
                Name
            </label>
            
            <InputText id="name" @bind-Value="user.Name"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                type="text" placeholder="Name" />
        </div>
        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="E-Mail">
                E-Mail
            </label>
            <InputText id="email" @bind-Value="user.Email"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                type="text" placeholder="E-Mail" />
        </div>
        <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="Password">
                Password
            </label>
            <InputText id="password" @bind-Value="user.Password" type="password"
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                placeholder="Password" />
        </div>


        <div class="w-full md:w-1/3 mb-8">
            <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="grid-state">
                User Type
            </label>
            <div class="relative">
                <InputSelect id="userType" @bind-Value="user.Type"
                    class="block appearance-none w-full cursor-pointer bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500">
                    <option value="company">Company</option>
                    <option value="student">Student</option>

                </InputSelect>
                <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                    <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                        <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                    </svg>
                </div>
            </div>
        </div>


        <div class="flex items-center justify-between">
            <button
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                type="submit">
                Save
            </button>

            <button
                class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                type="button">
                Reset
            </button>

        </div>



    </EditForm>

</div>



 

@code {
    private User user = new User();

    private async Task SubmitForm()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("https://localhost:7085/api/users", user);
            ResetForm();

            if (response.IsSuccessStatusCode)
            {
                // Successful response, handle as needed
                Console.WriteLine("User added successfully!");
            }
            else
            {
                // Handle error response
                Console.WriteLine($"Error: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private void ResetForm()
    {
        user = new User();
    }

}
